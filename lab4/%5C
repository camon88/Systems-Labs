/********************************************************
 * Kernels to be optimized for the CS:APP Performance Lab
 ********************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "defs.h"

/*
 * Please fill in the following team struct
 */
team_t team = {
    "jwjc",              /* Team name */

    "Jontahn Ward",     /* First member full name */
    "jw76577@appstate.edu",  /* First member email address */

    "Jake Campos",                   /* Second member full name (leave blank if none) */
    "jc79522@appstate.edu"                    /* Second member email addr (leave blank if none) */
};

/***************
 * ROTATE KERNEL
 ***************/

/******************************************************
 * Your different versions of the rotate kernel go here
 ******************************************************/

/*
 * naive_rotate - The naive baseline version of rotate
 */
char naive_rotate_descr[] = "naive_rotate: Naive baseline implementation";
void naive_rotate(int dim, pixel *src, pixel *dst)
{
    int i, j;

    for (i = 0; i < dim; i++)
        for (j = 0; j < dim; j++)
            dst[RIDX(dim-1-j, i, dim)] = src[RIDX(i, j, dim)];
}

/*
 * rotate - Your current working version of rotate
 * IMPORTANT: This is the version you will be graded on
 */
char rotate_descr[] = "Final Version";
void rotate(int dim, pixel *src, pixel *dst)
{
    int i;
    int j;
    unsigned int calculation, calculation1;
    unsigned int zero, one, two, three, four, five, six, seven;
    for(i = 0; i < dim; i+=8) {

        zero = (i * dim);
        one = (i + 1) * dim;
        two = (i + 2) * dim;
        three = (i + 3) * dim;
        four = (i + 4) * dim;
        five = (i + 5) * dim;
        six = (i + 6) * dim;
        seven = (i + 7) * dim;

        for(j = 0; j < dim; j++)
        {

            calculation = (dim - 1 - j) * dim;
            calculation1 = (calculation + i);
            dst[calculation1] = src[zero + j];
            dst[calculation1 + 1] = src[one + j];
            dst[calculation1 + 2] = src[two + j];
            dst[calculation1 + 3] = src[three + j];
            dst[calculation1 + 4] = src[four + j];
            dst[calculation1 + 5] = src[five + j];
            dst[calculation1 + 6] = src[six + j];
            dst[calculation1 + 7] = src[seven + j];

        }
    }

}

/*********************************************************************
 * register_rotate_functions - Register all of your different versions
 *     of the rotate kernel with the driver by calling the
 *     add_rotate_function() for each test function. When you run the
 *     driver program, it will test and report the performance of each
 *     registered test function.
 *********************************************************************/

void register_rotate_functions()
{
    add_rotate_function(&naive_rotate, naive_rotate_descr);
    add_rotate_function(&rotate, rotate_descr);
}


/***************
 * SMOOTH KERNEL
 **************/

/***************************************************************
 * Various typedefs and helper functions for the smooth function
 * You may modify these any way you like.
 **************************************************************/

/* A struct used to compute averaged pixel value */
typedef struct {
    int red;
    int green;
    int blue;
    int num;
} pixel_sum;

/* Compute min and max of two integers, respectively */
static int min(int a, int b) { return (a < b ? a : b); }
static int max(int a, int b) { return (a > b ? a : b); }

/*
 * initialize_pixel_sum - Initializes all fields of sum to 0
 */
static void initialize_pixel_sum(pixel_sum *sum)
{
    sum->red = sum->green = sum->blue = 0;
    sum->num = 0;
    return;
}

/*
 * accumulate_sum - Accumulates field values of p in corresponding
 * fields of sum
 */
static void accumulate_sum(pixel_sum *sum, pixel p)
{
    sum->red += (int) p.red;
    sum->green += (int) p.green;
    sum->blue += (int) p.blue;
    sum->num++;
    return;
}

/*
 * assign_sum_to_pixel - Computes averaged pixel value in current_pixel
 */
static void assign_sum_to_pixel(pixel *current_pixel, pixel_sum sum)
{
    current_pixel->red = (unsigned short) (sum.red/sum.num);
    current_pixel->green = (unsigned short) (sum.green/sum.num);
    current_pixel->blue = (unsigned short) (sum.blue/sum.num);
    return;
}

/*
 * avg - Returns averaged pixel value at (i,j)
 */
static pixel avg(int dim, int i, int j, pixel *src)
{
    int ii, jj;
    pixel_sum sum;
    pixel current_pixel;

    initialize_pixel_sum(&sum);
    for(ii = max(i-1, 0); ii <= min(i+1, dim-1); ii++)
        for(jj = max(j-1, 0); jj <= min(j+1, dim-1); jj++)
            accumulate_sum(&sum, src[RIDX(ii, jj, dim)]);

    assign_sum_to_pixel(&current_pixel, sum);
    return current_pixel;
}

/******************************************************
 * Your different versions of the smooth kernel go here
 ******************************************************/

/*
 * naive_smooth - The naive baseline version of smooth
 */
char naive_smooth_descr[] = "naive_smooth: Naive baseline implementation";
void naive_smooth(int dim, pixel *src, pixel *dst)
{
    int i, j;

    for (i = 0; i < dim; i++)
        for (j = 0; j < dim; j++)
            dst[RIDX(i, j, dim)] = avg(dim, i, j, src);
}

/*
 * smooth - Your current working version of smooth.
 * IMPORTANT: This is the version you will be graded on
 */
char smooth_descr[] = "smooth: Current working version";
void smooth(int dim, pixel *src, pixel *dst)
{
        unsigned int i, ii, m, mm, j, t, x, y;

        //Corners
        //Top-Left
        dst[0].red = ((src[0].red + src[1].red + src[dim].red + src[dim+1].red)>>2);
        dst[0].blue = ((src[0].blue + src[1].blue + src[dim].blue + src[dim+1].blue)>>2);
        dst[0].green = ((src[0].green + src[1].green + src[dim].green + src[dim+1].green)>>2);

        //Top-Right
        dst[dim-1].red = ((src[dim-1].red + src[dim-2].red + src[dim + dim - 2].red + src[dim + dim - 1].red)>>2);
        dst[dim-1].blue = ((src[dim-1].blue + src[dim-2].blue + src[dim + dim - 2].blue + src[dim + dim - 1].blue)>>
2);
        dst[dim-1].green = ((src[dim-1].green + src[dim-2].green + src[dim + dim - 2].green + src[dim + dim - 1].gre
en)>>2);


        //Bot-Left
        j = (dim * dim - dim);
        dst[j].red = ((src[j].red + src[j - dim].red + src[j - dim + 1].red + src[j + 1].red)>>2);
        dst[j].blue = ((src[j].blue + src[j - dim].blue + src[j - dim + 1].blue + src[j + 1].blue)>>2);
        dst[j].green = ((src[j].green + src[j - dim].green + src[j - dim + 1].green + src[j + 1].green)>>2);

        //Bot-Right
        t = (dim * dim);
        dst[t - 1].red = ((src[t - 1].red + src[t - dim - 1].red + src[t - dim - 2].red + src[t - 2].red)>>2);
        dst[t - 1].blue = ((src[t - 1].blue + src[t - dim - 1].blue + src[t - dim - 2].blue + src[t - 2].blue)>>2);
        dst[t - 1].green = ((src[t - 1].green + src[t - dim - 1].green + src[t - dim - 2].green + src[t - 2].green)>
>2);


        //Sides/Top/Bot
        //Top
        for(i = 1; i < dim - 1; i++)
        {
                dst[i].red = ((src[i].red + src[i - 1].red + src[i + 1].red + src[dim + i - 1].red + src[dim + i].re
d + src[dim + i + 1].red)/6);
                dst[i].blue = ((src[i].blue + src[i - 1].blue + src[i + 1].blue + src[dim + i - 1].blue + src[dim +
i].blue + src[dim + i + 1].blue)/6);
                dst[i].green = ((src[i].green + src[i - 1].green + src[i + 1].green + src[dim + i - 1].green + src[d
im + i].green + src[dim + i + 1].green)/6);
        }

        //Bottom
        for(i = j + 1; i < t - 1; i++)
        {
                dst[i].red = ((src[i].red + src[i - 1].red + src[i + 1].red + src[i - dim - 1].red + src[i - dim].re
d + src[i - dim + 1].red)/6);
                dst[i].blue = ((src[i].blue + src[i - 1].blue + src[i + 1].blue + src[i - dim - 1].blue + src[i - di
m].blue + src[i - dim + 1].blue)/6);
                dst[i].green = ((src[i].green + src[i - 1].green + src[i + 1].green + src[i - dim - 1].green + src[i
 - dim].green + src[i - dim + 1].green)/6);
        }

        //Left
        x = dim;
        for(i = 1; i < dim - 1; i++)
        {
                dst[x].red = ((src[x].red + src[x - dim].red + src[x - dim + 1].red + src[x + 1].red + src[x + dim].
red + src[x + dim + 1].red)/6);
                dst[x].blue = (src[x].blue + src[x - dim].blue + src[x - dim + 1].blue + src[x + 1].blue + src[x + d
im].blue + src[x + dim + 1].blue)/6;
                dst[x].green = (src[x].green + src[x - dim].green + src[x - dim + 1].green + src[x + 1].green + src[
x + dim].green + src[x + dim + 1].green)/6;
                x = x + dim;
        }

        //Right
        y = dim + dim - 1;
        for(i = 1; i < dim - 1; i++)
        {
                dst[y].red = ((src[y].red + src[y - dim].red + src[y - dim - 1].red + src[y - 1].red + src[y + dim].
red + src[y + dim - 1].red)/6);
                dst[y].blue = (src[y].blue + src[y - dim].blue + src[y - dim - 1].blue + src[y - 1].blue + src[y + d
im].blue + src[y + dim - 1].blue)/6;
                dst[y].green = (src[y].green + src[y - dim].green + src[y - dim - 1].green + src[y - 1].green + src[
y + dim].green + src[y + dim - 1].green)/6;
                y = y + dim;
        }

        //The Rest
        m = dim;
        for(i = 1; i < dim - 1; i++)
        {
                for(ii = 1; ii < dim - 1; ii++)
                {
                        mm = (m + ii);
                        dst[mm].red = ((src[mm].red +
                                            src[mm - 1].red +
                                            src[mm + 1].red +
                                            src[mm - dim - 1].red +
                                            src[mm - dim].red +
                                            src[mm - dim + 1].red +
                                            src[mm + dim - 1].red +
                                            src[mm + dim].red +
                                            src[mm + dim + 1].red) /9);
                        dst[mm].blue = ((src[mm].blue +
                                            src[mm - 1].blue +
                                            src[mm + 1].blue +
                                            src[mm - dim - 1].blue +
                                            src[mm - dim].blue +
                                            src[mm - dim + 1].blue +
                                            src[mm + dim - 1].blue +
                                            src[mm + dim].blue +
                                            src[mm + dim + 1].blue) /9);
                        dst[mm].green = ((src[mm].green +
                                            src[mm - 1].green +
                                            src[mm + 1].green +
                                            src[mm - dim - 1].green +
                                            src[mm - dim].green +
                                            src[mm - dim + 1].green +
                                            src[mm + dim - 1].green +
                                            src[mm + dim].green +
                                            src[mm + dim + 1].green) /9);
                }
                m = m + dim;
        }

}


/*********************************************************************
 * register_smooth_functions - Register all of your different versions
 *     of the smooth kernel with the driver by calling the
 *     add_smooth_function() for each test function.  When you run the
 *     driver program, it will test and report the performance of each
 *     registered test function.
 *********************************************************************/

void register_smooth_functions() {
    add_smooth_function(&smooth, smooth_descr);
    add_smooth_function(&naive_smooth, naive_smooth_descr);
    /* ... Register additional test functions here */
}
